// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ViewDietPageTests Renders correctly 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "white",
        "display": "flex",
        "height": "100%",
        "justifyContent": "center",
      },
      Object {
        "justifyContent": "flex-start",
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "paddingTop": 7.5,
      }
    }
    data={Array []}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        colors={
          Array [
            "#2AB7CA",
          ]
        }
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "width": "100%",
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <View
    pointerEvents="box-none"
    style={
      Object {
        "alignItems": "flex-end",
        "height": "100%",
        "justifyContent": "flex-end",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      accessible={true}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      pointerEvents="none"
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "bottom": 30,
          "justifyContent": "center",
          "overflow": "visible",
          "width": 120,
        }
      }
    >
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#156E91",
            "borderRadius": 5,
            "justifyContent": "center",
            "opacity": 0,
            "padding": 5,
            "position": "absolute",
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <Text
          style={
            Object {
              "bottom": 1,
              "color": "white",
              "fontSize": 16,
            }
          }
        >
          Exception
        </Text>
      </View>
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#156E91",
            "borderRadius": 5,
            "justifyContent": "center",
            "opacity": 0,
            "padding": 5,
            "position": "absolute",
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <Text
          style={
            Object {
              "bottom": 1,
              "color": "white",
              "fontSize": 16,
            }
          }
        >
          Ingredient
        </Text>
      </View>
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#156E91",
            "borderRadius": 5,
            "justifyContent": "center",
            "opacity": 0,
            "padding": 5,
            "position": "absolute",
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <Text
          style={
            Object {
              "bottom": 1,
              "color": "white",
              "fontSize": 16,
            }
          }
        >
          Category
        </Text>
      </View>
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#2AB7CA",
            "borderRadius": 30,
            "elevation": 5,
            "height": 60,
            "justifyContent": "center",
            "width": 60,
          }
        }
      >
        <Icon
          color="white"
          name="add"
          size={36}
          style={
            Object {
              "opacity": 0,
              "position": "absolute",
              "transform": Array [
                Object {
                  "rotate": "0deg",
                },
              ],
            }
          }
        />
        <Icon
          color="white"
          name="add"
          size={36}
          style={
            Object {
              "opacity": 1,
              "position": "absolute",
              "transform": Array [
                Object {
                  "rotate": "0deg",
                },
              ],
            }
          }
        />
      </View>
    </View>
  </View>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    presentationStyle="overFullScreen"
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "backgroundColor": "black",
              "opacity": 0.5,
            },
          ]
        }
      />
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#ced4da",
            "borderRadius": 15,
            "elevation": 10,
            "maxHeight": "80%",
            "width": "90%",
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1E91AD",
              "borderTopLeftRadius": 15,
              "borderTopRightRadius": 15,
              "height": 40,
              "justifyContent": "center",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "white",
                "fontSize": 16,
              }
            }
          >
            Add Ingredient
          </Text>
        </View>
        <View
          style={
            Object {
              "padding": 10,
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 15,
                "flexDirection": "row",
              }
            }
          >
            <TextInput
              allowFontScaling={true}
              onBlur={[Function]}
              onChangeText={[Function]}
              onFocus={[Function]}
              onSubmitEditing={[Function]}
              placeholder="Ingredient"
              placeholderTextColor="#868e96"
              rejectResponderTermination={true}
              style={
                Array [
                  Object {
                    "backgroundColor": "#e9ecef",
                    "borderColor": "#868e96",
                    "borderRadius": 15,
                    "borderWidth": 0,
                    "color": "#495057",
                    "fontSize": 16,
                    "height": 50,
                    "marginBottom": 15,
                    "paddingLeft": 15,
                    "paddingRight": 15,
                  },
                  Object {
                    "borderBottomRightRadius": 0,
                    "borderTopRightRadius": 0,
                    "flexGrow": 1,
                    "marginBottom": 0,
                  },
                  false,
                ]
              }
              underlineColorAndroid="transparent"
            />
            <View
              accessible={true}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignContent": "center",
                    "alignItems": "center",
                    "backgroundColor": "#2AB7CA",
                    "borderRadius": 15,
                    "flexDirection": "row",
                    "height": 50,
                    "justifyContent": "center",
                    "marginBottom": 15,
                  },
                  Object {
                    "borderBottomLeftRadius": 0,
                    "borderTopLeftRadius": 0,
                    "marginBottom": 0,
                    "width": 50,
                  },
                ]
              }
            >
              <Icon
                color="white"
                name="add"
                size={24}
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </Modal>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    presentationStyle="overFullScreen"
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "backgroundColor": "black",
              "opacity": 0.5,
            },
          ]
        }
      />
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#ced4da",
            "borderRadius": 15,
            "elevation": 10,
            "maxHeight": "80%",
            "width": "90%",
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1E91AD",
              "borderTopLeftRadius": 15,
              "borderTopRightRadius": 15,
              "height": 40,
              "justifyContent": "center",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "white",
                "fontSize": 16,
              }
            }
          >
            Add Exception
          </Text>
        </View>
        <View
          style={
            Object {
              "padding": 10,
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 15,
                "flexDirection": "row",
              }
            }
          >
            <TextInput
              allowFontScaling={true}
              onBlur={[Function]}
              onChangeText={[Function]}
              onFocus={[Function]}
              onSubmitEditing={[Function]}
              placeholder="Ingredient"
              placeholderTextColor="#868e96"
              rejectResponderTermination={true}
              style={
                Array [
                  Object {
                    "backgroundColor": "#e9ecef",
                    "borderColor": "#868e96",
                    "borderRadius": 15,
                    "borderWidth": 0,
                    "color": "#495057",
                    "fontSize": 16,
                    "height": 50,
                    "marginBottom": 15,
                    "paddingLeft": 15,
                    "paddingRight": 15,
                  },
                  Object {
                    "borderBottomRightRadius": 0,
                    "borderTopRightRadius": 0,
                    "flexGrow": 1,
                    "marginBottom": 0,
                  },
                  false,
                ]
              }
              underlineColorAndroid="transparent"
            />
            <View
              accessible={true}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignContent": "center",
                    "alignItems": "center",
                    "backgroundColor": "#2AB7CA",
                    "borderRadius": 15,
                    "flexDirection": "row",
                    "height": 50,
                    "justifyContent": "center",
                    "marginBottom": 15,
                  },
                  Object {
                    "borderBottomLeftRadius": 0,
                    "borderTopLeftRadius": 0,
                    "marginBottom": 0,
                    "width": 50,
                  },
                ]
              }
            >
              <Icon
                color="white"
                name="add"
                size={24}
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </Modal>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    presentationStyle="overFullScreen"
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "backgroundColor": "black",
              "opacity": 0.5,
            },
          ]
        }
      />
      <View
        accessible={true}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#ced4da",
            "borderRadius": 15,
            "elevation": 10,
            "maxHeight": "80%",
            "width": "90%",
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1E91AD",
              "borderTopLeftRadius": 15,
              "borderTopRightRadius": 15,
              "height": 40,
              "justifyContent": "center",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "white",
                "fontSize": 16,
              }
            }
          >
            Add Category
          </Text>
        </View>
        <View
          style={
            Object {
              "padding": 10,
            }
          }
        >
          <RCTScrollView
            ItemSeparatorComponent={[Function]}
            data={null}
            disableVirtualization={false}
            getItem={[Function]}
            getItemCount={[Function]}
            horizontal={false}
            initialNumToRender={10}
            keyExtractor={[Function]}
            maxToRenderPerBatch={10}
            onContentSizeChange={[Function]}
            onEndReachedThreshold={2}
            onLayout={[Function]}
            onMomentumScrollEnd={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            removeClippedSubviews={false}
            renderItem={[Function]}
            scrollEventThrottle={50}
            stickyHeaderIndices={Array []}
            updateCellsBatchingPeriod={50}
            viewabilityConfigCallbackPairs={Array []}
            windowSize={21}
          >
            <View />
          </RCTScrollView>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;
