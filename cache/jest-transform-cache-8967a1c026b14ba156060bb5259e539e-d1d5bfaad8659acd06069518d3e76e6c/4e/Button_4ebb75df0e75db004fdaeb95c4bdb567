51b6cbeaf997442692dc6a1ed3221180
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _config = require("../config");

var _helpers = require("../helpers");

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var defaultLoadingProps = function defaultLoadingProps(type, theme) {
  return {
    color: type === 'solid' ? 'white' : theme.colors.primary,
    size: 'small'
  };
};

var Button = function (_Component) {
  (0, _inherits2.default)(Button, _Component);

  var _super = _createSuper(Button);

  function Button() {
    var _this;

    (0, _classCallCheck2.default)(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleOnPress = function () {
      var _this$props = _this.props,
          loading = _this$props.loading,
          onPress = _this$props.onPress;

      if (!loading) {
        onPress();
      }
    };

    return _this;
  }

  (0, _createClass2.default)(Button, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          linearGradientProps = _this$props2.linearGradientProps,
          ViewComponent = _this$props2.ViewComponent;

      if (linearGradientProps && !global.Expo && !ViewComponent) {
        console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          TouchableComponent = _this$props3.TouchableComponent,
          containerStyle = _this$props3.containerStyle,
          onPress = _this$props3.onPress,
          buttonStyle = _this$props3.buttonStyle,
          type = _this$props3.type,
          loading = _this$props3.loading,
          loadingStyle = _this$props3.loadingStyle,
          passedLoadingProps = _this$props3.loadingProps,
          title = _this$props3.title,
          titleProps = _this$props3.titleProps,
          passedTitleStyle = _this$props3.titleStyle,
          icon = _this$props3.icon,
          iconContainerStyle = _this$props3.iconContainerStyle,
          iconRight = _this$props3.iconRight,
          disabled = _this$props3.disabled,
          disabledStyle = _this$props3.disabledStyle,
          disabledTitleStyle = _this$props3.disabledTitleStyle,
          raised = _this$props3.raised,
          linearGradientProps = _this$props3.linearGradientProps,
          _this$props3$ViewComp = _this$props3.ViewComponent,
          ViewComponent = _this$props3$ViewComp === void 0 ? !disabled && linearGradientProps && global.Expo ? global.Expo.LinearGradient : _reactNative.View : _this$props3$ViewComp,
          theme = _this$props3.theme,
          attributes = (0, _objectWithoutProperties2.default)(_this$props3, ["TouchableComponent", "containerStyle", "onPress", "buttonStyle", "type", "loading", "loadingStyle", "loadingProps", "title", "titleProps", "titleStyle", "icon", "iconContainerStyle", "iconRight", "disabled", "disabledStyle", "disabledTitleStyle", "raised", "linearGradientProps", "ViewComponent", "theme"]);

      var TouchableComponentInternal = TouchableComponent || _reactNative.Platform.select({
        android: linearGradientProps ? _reactNative.TouchableOpacity : _reactNative.TouchableNativeFeedback,
        default: _reactNative.TouchableOpacity
      });

      var titleStyle = _reactNative.StyleSheet.flatten([styles.title(type, theme), passedTitleStyle, disabled && styles.disabledTitle(theme), disabled && disabledTitleStyle]);

      var background = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 ? _reactNative.TouchableNativeFeedback.Ripple((0, _color.default)(titleStyle.color).alpha(0.32).rgb().string(), true) : undefined;

      var loadingProps = _objectSpread(_objectSpread({}, defaultLoadingProps(type, theme)), passedLoadingProps);

      var accessibilityState = {
        disabled: !!disabled,
        busy: !!loading
      };
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, {
          borderRadius: buttonStyle.borderRadius || styles.container.borderRadius
        }, containerStyle, raised && !disabled && styles.raised(type)])
      }, _react.default.createElement(TouchableComponentInternal, (0, _extends2.default)({
        onPress: this.handleOnPress,
        delayPressIn: 0,
        activeOpacity: 0.3,
        accessibilityRole: "button",
        accessibilityState: accessibilityState,
        disabled: disabled,
        background: background
      }, attributes), _react.default.createElement(ViewComponent, (0, _extends2.default)({}, linearGradientProps, {
        style: _reactNative.StyleSheet.flatten([styles.button(type, theme), buttonStyle, disabled && styles.disabled(type, theme), disabled && disabledStyle])
      }), loading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
        style: _reactNative.StyleSheet.flatten([styles.loading, loadingStyle]),
        color: loadingProps.color,
        size: loadingProps.size
      }, loadingProps)), !loading && icon && !iconRight && (0, _helpers.renderNode)(_Icon.default, icon, {
        containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
      }), !loading && !!title && _react.default.createElement(_reactNative.Text, (0, _extends2.default)({
        style: titleStyle
      }, titleProps), title), !loading && icon && iconRight && (0, _helpers.renderNode)(_Icon.default, icon, {
        containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
      }))));
    }
  }]);
  return Button;
}(_react.Component);

exports.Button = Button;
Button.propTypes = {
  title: _propTypes.default.string,
  titleStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  titleProps: _propTypes.default.object,
  buttonStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  type: _propTypes.default.oneOf(['solid', 'clear', 'outline']),
  loading: _propTypes.default.bool,
  loadingStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  loadingProps: _propTypes.default.object,
  onPress: _propTypes.default.func,
  containerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  icon: _helpers.nodeType,
  iconContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  iconRight: _propTypes.default.bool,
  linearGradientProps: _propTypes.default.object,
  TouchableComponent: _propTypes.default.elementType,
  ViewComponent: _propTypes.default.elementType,
  disabled: _propTypes.default.bool,
  disabledStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  disabledTitleStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  raised: _propTypes.default.bool,
  theme: _propTypes.default.object
};
Button.defaultProps = {
  title: '',
  iconRight: false,
  onPress: function onPress() {
    return console.log('Please attach a method to this component');
  },
  type: 'solid',
  buttonStyle: {
    borderRadius: 3
  },
  disabled: false,
  raised: false,
  loading: false
};
var styles = {
  button: function button(type, theme) {
    return {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: 3,
      backgroundColor: type === 'solid' ? theme.colors.primary : 'transparent',
      padding: 8,
      borderWidth: type === 'outline' ? _reactNative.StyleSheet.hairlineWidth : 0,
      borderColor: theme.colors.primary
    };
  },
  container: {
    overflow: 'hidden',
    borderRadius: 3
  },
  disabled: function disabled(type, theme) {
    return _objectSpread(_objectSpread({}, (0, _helpers.conditionalStyle)(type === 'solid', {
      backgroundColor: theme.colors.disabled
    })), (0, _helpers.conditionalStyle)(type === 'outline', {
      borderColor: (0, _helpers.color)(theme.colors.disabled).darken(0.3).string()
    }));
  },
  disabledTitle: function disabledTitle(theme) {
    return {
      color: (0, _helpers.color)(theme.colors.disabled).darken(0.3).string()
    };
  },
  title: function title(type, theme) {
    return _objectSpread({
      color: type === 'solid' ? 'white' : theme.colors.primary,
      fontSize: 16,
      textAlign: 'center',
      paddingVertical: 1
    }, _reactNative.Platform.select({
      android: {
        fontFamily: 'sans-serif-medium'
      },
      default: {
        fontSize: 18
      }
    }));
  },
  iconContainer: {
    marginHorizontal: 5
  },
  raised: function raised(type) {
    return type !== 'clear' && _objectSpread({
      backgroundColor: '#fff',
      overflow: 'visible'
    }, _reactNative.Platform.select({
      android: {
        elevation: 4
      },
      default: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    }));
  },
  loading: {
    marginVertical: 2
  }
};

var _default = (0, _config.withTheme)(Button, 'Button');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,