d49439480006b2520ca75a1902de5213
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStatusBarHeight = getStatusBarHeight;
exports.isExpo = exports.isIPhoneWithMonobrow = exports.isIPhoneXMax = exports.isIPhoneX = void 0;

var _reactNative = require("react-native");

var X_WIDTH = 375;
var X_HEIGHT = 812;
var XSMAX_WIDTH = 414;
var XSMAX_HEIGHT = 896;

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    W_HEIGHT = _Dimensions$get.height,
    W_WIDTH = _Dimensions$get.width;

var isIPhoneX_v = false;
var isIPhoneXMax_v = false;
var isIPhoneWithMonobrow_v = false;

if (_reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS) {
  if (W_WIDTH === X_WIDTH && W_HEIGHT === X_HEIGHT) {
    isIPhoneWithMonobrow_v = true;
    isIPhoneX_v = true;
  }

  if (W_WIDTH === XSMAX_WIDTH && W_HEIGHT === XSMAX_HEIGHT) {
    isIPhoneWithMonobrow_v = true;
    isIPhoneXMax_v = true;
  }
}

var isIPhoneX = function isIPhoneX() {
  return isIPhoneX_v;
};

exports.isIPhoneX = isIPhoneX;

var isIPhoneXMax = function isIPhoneXMax() {
  return isIPhoneXMax_v;
};

exports.isIPhoneXMax = isIPhoneXMax;

var isIPhoneWithMonobrow = function isIPhoneWithMonobrow() {
  return isIPhoneWithMonobrow_v;
};

exports.isIPhoneWithMonobrow = isIPhoneWithMonobrow;

var getExpoRoot = function getExpoRoot() {
  return global.Expo || global.__expo || global.__exponent;
};

var isExpo = function isExpo() {
  return getExpoRoot() !== undefined;
};

exports.isExpo = isExpo;

function getStatusBarHeight(skipAndroid) {
  return _reactNative.Platform.select({
    ios: isIPhoneWithMonobrow_v ? 44 : 20,
    android: skipAndroid ? 0 : _reactNative.StatusBar.currentHeight,
    default: 0
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlhfV0lEVEgiLCJYX0hFSUdIVCIsIlhTTUFYX1dJRFRIIiwiWFNNQVhfSEVJR0hUIiwiRGltZW5zaW9ucyIsImdldCIsIldfSEVJR0hUIiwiaGVpZ2h0IiwiV19XSURUSCIsIndpZHRoIiwiaXNJUGhvbmVYX3YiLCJpc0lQaG9uZVhNYXhfdiIsImlzSVBob25lV2l0aE1vbm9icm93X3YiLCJQbGF0Zm9ybSIsIk9TIiwiaXNQYWQiLCJpc1RWT1MiLCJpc0lQaG9uZVgiLCJpc0lQaG9uZVhNYXgiLCJpc0lQaG9uZVdpdGhNb25vYnJvdyIsImdldEV4cG9Sb290IiwiZ2xvYmFsIiwiRXhwbyIsIl9fZXhwbyIsIl9fZXhwb25lbnQiLCJpc0V4cG8iLCJ1bmRlZmluZWQiLCJnZXRTdGF0dXNCYXJIZWlnaHQiLCJza2lwQW5kcm9pZCIsInNlbGVjdCIsImlvcyIsImFuZHJvaWQiLCJTdGF0dXNCYXIiLCJjdXJyZW50SGVpZ2h0IiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUEsSUFBTUEsT0FBTyxHQUFHLEdBQWhCO0FBQ0EsSUFBTUMsUUFBUSxHQUFHLEdBQWpCO0FBRUEsSUFBTUMsV0FBVyxHQUFHLEdBQXBCO0FBQ0EsSUFBTUMsWUFBWSxHQUFHLEdBQXJCOztzQkFFNkNDLHdCQUFXQyxHQUFYLENBQWUsUUFBZixDO0lBQTdCQyxRLG1CQUFSQyxNO0lBQXlCQyxPLG1CQUFQQyxLOztBQUUxQixJQUFJQyxXQUFXLEdBQUcsS0FBbEI7QUFDQSxJQUFJQyxjQUFjLEdBQUcsS0FBckI7QUFDQSxJQUFJQyxzQkFBc0IsR0FBRyxLQUE3Qjs7QUFFQSxJQUFJQyxzQkFBU0MsRUFBVCxLQUFnQixLQUFoQixJQUF5QixDQUFDRCxzQkFBU0UsS0FBbkMsSUFBNEMsQ0FBQ0Ysc0JBQVNHLE1BQTFELEVBQWtFO0FBQzlELE1BQUlSLE9BQU8sS0FBS1IsT0FBWixJQUF1Qk0sUUFBUSxLQUFLTCxRQUF4QyxFQUFrRDtBQUM5Q1csSUFBQUEsc0JBQXNCLEdBQUcsSUFBekI7QUFDQUYsSUFBQUEsV0FBVyxHQUFHLElBQWQ7QUFDSDs7QUFFRCxNQUFJRixPQUFPLEtBQUtOLFdBQVosSUFBMkJJLFFBQVEsS0FBS0gsWUFBNUMsRUFBMEQ7QUFDdERTLElBQUFBLHNCQUFzQixHQUFHLElBQXpCO0FBQ0FELElBQUFBLGNBQWMsR0FBRyxJQUFqQjtBQUNIO0FBQ0o7O0FBRU0sSUFBTU0sU0FBUyxHQUFHLFNBQVpBLFNBQVk7QUFBQSxTQUFPUCxXQUFQO0FBQUEsQ0FBbEI7Ozs7QUFDQSxJQUFNUSxZQUFZLEdBQUcsU0FBZkEsWUFBZTtBQUFBLFNBQU9QLGNBQVA7QUFBQSxDQUFyQjs7OztBQUNBLElBQU1RLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBdUI7QUFBQSxTQUFNUCxzQkFBTjtBQUFBLENBQTdCOzs7O0FBRVAsSUFBTVEsV0FBVyxHQUFHLFNBQWRBLFdBQWM7QUFBQSxTQUFNQyxNQUFNLENBQUNDLElBQVAsSUFBZUQsTUFBTSxDQUFDRSxNQUF0QixJQUFnQ0YsTUFBTSxDQUFDRyxVQUE3QztBQUFBLENBQXBCOztBQUVPLElBQU1DLE1BQU0sR0FBRyxTQUFUQSxNQUFTO0FBQUEsU0FBTUwsV0FBVyxPQUFPTSxTQUF4QjtBQUFBLENBQWY7Ozs7QUFFQSxTQUFTQyxrQkFBVCxDQUE0QkMsV0FBNUIsRUFBeUM7QUFDNUMsU0FBT2Ysc0JBQVNnQixNQUFULENBQWdCO0FBQ25CQyxJQUFBQSxHQUFHLEVBQUVsQixzQkFBc0IsR0FBRyxFQUFILEdBQVEsRUFEaEI7QUFFbkJtQixJQUFBQSxPQUFPLEVBQUVILFdBQVcsR0FBRyxDQUFILEdBQU9JLHVCQUFVQyxhQUZsQjtBQUduQkMsSUFBQUEsT0FBTyxFQUFFO0FBSFUsR0FBaEIsQ0FBUDtBQUtIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGltZW5zaW9ucywgUGxhdGZvcm0sIFN0YXR1c0JhciB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmNvbnN0IFhfV0lEVEggPSAzNzU7XG5jb25zdCBYX0hFSUdIVCA9IDgxMjtcblxuY29uc3QgWFNNQVhfV0lEVEggPSA0MTQ7XG5jb25zdCBYU01BWF9IRUlHSFQgPSA4OTY7XG5cbmNvbnN0IHsgaGVpZ2h0OiBXX0hFSUdIVCwgd2lkdGg6IFdfV0lEVEggfSA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKTtcblxubGV0IGlzSVBob25lWF92ID0gZmFsc2U7XG5sZXQgaXNJUGhvbmVYTWF4X3YgPSBmYWxzZTtcbmxldCBpc0lQaG9uZVdpdGhNb25vYnJvd192ID0gZmFsc2U7XG5cbmlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgJiYgIVBsYXRmb3JtLmlzUGFkICYmICFQbGF0Zm9ybS5pc1RWT1MpIHtcbiAgICBpZiAoV19XSURUSCA9PT0gWF9XSURUSCAmJiBXX0hFSUdIVCA9PT0gWF9IRUlHSFQpIHtcbiAgICAgICAgaXNJUGhvbmVXaXRoTW9ub2Jyb3dfdiA9IHRydWU7XG4gICAgICAgIGlzSVBob25lWF92ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoV19XSURUSCA9PT0gWFNNQVhfV0lEVEggJiYgV19IRUlHSFQgPT09IFhTTUFYX0hFSUdIVCkge1xuICAgICAgICBpc0lQaG9uZVdpdGhNb25vYnJvd192ID0gdHJ1ZTtcbiAgICAgICAgaXNJUGhvbmVYTWF4X3YgPSB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzSVBob25lWCA9ICgpID0+ICBpc0lQaG9uZVhfdjtcbmV4cG9ydCBjb25zdCBpc0lQaG9uZVhNYXggPSAoKSA9PiAgaXNJUGhvbmVYTWF4X3Y7XG5leHBvcnQgY29uc3QgaXNJUGhvbmVXaXRoTW9ub2Jyb3cgPSAoKSA9PiBpc0lQaG9uZVdpdGhNb25vYnJvd192O1xuXG5jb25zdCBnZXRFeHBvUm9vdCA9ICgpID0+IGdsb2JhbC5FeHBvIHx8IGdsb2JhbC5fX2V4cG8gfHwgZ2xvYmFsLl9fZXhwb25lbnQ7XG5cbmV4cG9ydCBjb25zdCBpc0V4cG8gPSAoKSA9PiBnZXRFeHBvUm9vdCgpICE9PSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0dXNCYXJIZWlnaHQoc2tpcEFuZHJvaWQpIHtcbiAgICByZXR1cm4gUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgaW9zOiBpc0lQaG9uZVdpdGhNb25vYnJvd192ID8gNDQgOiAyMCxcbiAgICAgICAgYW5kcm9pZDogc2tpcEFuZHJvaWQgPyAwIDogU3RhdHVzQmFyLmN1cnJlbnRIZWlnaHQsXG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICB9KVxufVxuIl19